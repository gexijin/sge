---
title: Reproducing iDEP analyses with auto-generated R Markdown
author: Steven Ge
date: '2018-07-08'
slug: reproducing-idep-analyses-with-auto-generated-r-markdown
categories:
  - R
  - RNA-Seq
  - Bioinformatics
tags:
  - iDEP
header:
  caption: ''
  image: ''
---

This R markdown file was auto-generated by [iDEP](http://bioinformatics.sdstate.edu/idep), a tool for interactive analysis of RNA-Seq data. It is assumed that users have analyzed their data with iDEP by clicking through all the tabs and have downloaded the related files to a folder. 
	

## 1. Read data  
R packages and iDEP core Functions. 
	Users can also download the iDEP_core_functions.R file. 
	Many R packages needs to be installed first. This may take hours. 
	Each of these packages took years to develop.So be a patient thief. Sometimes dependencies needs to be installed manually. 
	If you are using an older version of R, and having trouble with package installation,
	try un-install the current version of R, delete all folders and files 
	(C:/Program Files/R/R-3.4.3), and 
	reinstall from scratch.  
```{r, message=FALSE,warning=FALSE  }  
 if(file.exists('iDEP_core_functions.R'))
	source('iDEP_core_functions.R') else 
    source('https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/iDEP_core_functions.R') 
```  
We are using the downloaded gene expression file where gene IDs has 
	been converted to Ensembl gene IDs. This is because the ID conversion database is too large
	to download. You can use your original file if your file uses Ensembl ID, or you do not want 
	to use the pathway files available in iDEP (or it is not available).  
```{r, message=FALSE  }  
 inputFile <- 'C:/Users/Xijin.Ge/Downloads/Downloaded_Converted_Data.csv'  # Expression matrix
 sampleInfoFile <- 'C:/Users/Xijin.Ge/Downloads/Downloaded_sampleInfoFile.csv' # Experiment design file 
 geneInfoFile <- 'C:/Users/Xijin.Ge/Downloads/Mouse__mmusculus_gene_ensembl_GeneInfo.csv' #Gene symbols, location etc. 
 geneSetFile <- 'C:/Users/Xijin.Ge/Downloads/Mouse__mmusculus_gene_ensembl.db'  # pathway database in SQL; can be GMT format 
 STRING10_speciesFile <- 'https://raw.githubusercontent.com/iDEP-SDSU/idep/master/shinyapps/idep/STRING10_species.csv' 
``` 
Parameters for reading data  
```{r, message=FALSE  } 
 input_missingValue <- 'geneMedian'	#Missing values imputation method
 input_dataFileFormat <- 1	#1- read counts, 2 FKPM/RPKM or DNA microarray
 input_minCounts <- 0.5	#Min counts
 input_NminSamples <- 1	#Minimum number of samples 
 input_countsLogStart <- 4	#Pseudo count for log CPM
 input_CountsTransform <- 1	#Methods for data transformation of counts. 1-EdgeR's logCPM 2-VST, 3-rlog 
```
```{r, message=FALSE  }  

 readData.out <- readData(inputFile) 
 library(knitr)   #  install if needed. for showing tables with kable 
 kable( head(readData.out$data) )    # show the first few rows of data 
```
```{r, message=FALSE  }  
 readSampleInfo.out <- readSampleInfo(sampleInfoFile) 
 kable( readSampleInfo.out )  
```
```{r, message=FALSE  }  
 input_selectOrg ="NEW" 
 input_selectGO <- 'KEGG'	#Gene set category 
 input_noIDConversion = TRUE  
 allGeneInfo.out <- geneInfo(geneInfoFile) 
 converted.out = NULL 
 convertedData.out <- convertedData()	 
 nGenesFilter()  
 convertedCounts.out <- convertedCounts()  # converted counts, just for compatibility 
 readCountsBias()  # detecting bias in sequencing depth 
```

## 2. Pre-process 
```{r, message=FALSE  }  
# Read counts per library 
 parDefault = par() 
 par(mar=c(12,4,2,2)) 
 # barplot of total read counts
 x <- readData.out$rawCounts
 groups = as.factor( detectGroups(colnames(x ) ) )
 if(nlevels(groups)<=1 | nlevels(groups) >20 )  
  col1 = 'green'  else
  col1 = rainbow(nlevels(groups))[ groups ]				
		 
 barplot( colSums(x)/1e6, 
		col=col1,las=3, main="Total read counts (millions)")  
```
```{r, message=FALSE  }  

 # Box plot 
 x = readData.out$data 
 boxplot(x, las = 2, col=col1,
    ylab='Transformed expression levels',
    main='Distribution of transformed data') 
```
```{r, message=FALSE, warning=FALSE  }  
 #Density plot 
 par(parDefault) 
 densityPlot()       
```
```{r, message=FALSE  }  

 # Scatter plot of the first two samples 
 plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], 
    main='Scatter plot of first two samples') 
```
```{r, message=FALSE  }  

 ####plot gene or gene family
 input_selectOrg ="BestMatch" 
 input_geneSearch <- 'HOXA'	#Gene ID for searching 
 genePlot()  
```
```{r, message=FALSE  } 
 input_useSD <- 'FALSE'	#Use standard deviation instead of standard error in error bar? 
 geneBarPlotError()       
```
## 3. Heatmap  
```{r, message=FALSE  }  
 # hierarchical clustering tree
 x <- readData.out$data
 maxGene <- apply(x,1,max)
 # remove bottom 25% lowly expressed genes, which inflate the PPC
 x <- x[which(maxGene > quantile(maxGene)[1] ) ,] 
 plot(as.dendrogram(hclust2( dist2(t(x)))), ylab="1 - Pearson C.C.", type = "rectangle") 
```
```{r, message=FALSE  }  
 #Correlation matrix
 input_labelPCC <- TRUE	#Show correlation coefficient? 
 correlationMatrix() 
```
```{r, message=FALSE  }  

 # Parameters for heatmap
 input_nGenes <- 1000	#Top genes for heatmap
 input_geneCentering <- TRUE	#centering genes ?
 input_sampleCentering <- FALSE	#Center by sample?
 input_geneNormalize <- FALSE	#Normalize by gene?
 input_sampleNormalize <- FALSE	#Normalize by sample?
 input_noSampleClustering <- FALSE	#Use original sample order
 input_heatmapCutoff <- 4	#Remove outliers beyond number of SDs 
 input_distFunctions <- 1	#which distant funciton to use
 input_hclustFunctions <- 1	#Linkage type
 input_heatColors1 <- 1	#Colors
 input_selectFactorsHeatmap <- 'Sample_Name'	#Sample coloring factors 
 #png('heatmap.png', width = 10, height = 15, units = 'in', res = 300) 
 #staticHeatmap() 
 #dev.off()  
```
![heatmap] (/img/heatmap.png)   
```{r, message=FALSE  }  
 heatmapPlotly() # interactive heatmap using Plotly 
```

## 4. K-means clustering   
```{r, message=FALSE  } 
 input_nGenesKNN <- 2000	#Number of genes fro k-Means
 input_nClusters <- 4	#Number of clusters 
 maxGeneClustering = 12000
 input_kmeansNormalization <- 'geneMean'	#Normalization
 input_KmeansReRun <- 0	#Random seed 

 distributionSD()  #Distribution of standard deviations 
```     
```{r, message=FALSE  }  
 KmeansNclusters()  #Number of clusters 
```     
```{r, message=FALSE  }  

 Kmeans.out = Kmeans()   #Running K-means 
 KmeansHeatmap()   #Heatmap for k-Means 
 
```    



